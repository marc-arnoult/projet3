{%  extends 'layout.twig' %}

{% set article = request.attributes.get('article') %}
{% set comments = request.attributes.get('comments') %}
{% set messages = request.attributes.get('messages') %}

{% block title %}
    {{ article.title }}
{% endblock %}
{% block content %}
    {% for key, message in messages %}
        <div class="alert alert-{{ key }}">
            <span class="alert-text">{{ message[0] }}</span>
            <span class="alert-remove">x</span>
        </div>
    {% endfor %}
<section id="article-page">
    <div class="article-container">
        <article class="article">
            <div class="round">
                <time>
                    {{ article.created_at|date('d M Y') }}
                </time>
            </div>
            <h2>{{ article.title }}</h2>
            <div class="content">
                {{ article.content | striptags ('<h1><br><br />')| raw | nl2br }}
            </div>
        </article>
    </div>
</section>
<section>
    <div class="comment-response">
        <h3>* Commentaires *</h3>
        {% if user %}
            <form action="/comments" method="post" id="formComment">
                <input type="hidden" name="id_article" value="{{ article.id }}">
                <label for="content">Commentaire :</label>
                <textarea name="content" required></textarea>
                <input type="submit">
            </form>
        {% endif %}
    </div>
    {% for comment in comments %}
        {% include 'comments.twig' %}
    {% endfor %}
</section>
{% endblock %}
{% block script %}
    <script>
        $(function () {
            $(".btn-delete").click(function (e) {
                e.preventDefault();

                $.ajax({
                    url: '/delete-comment',
                    type: 'DELETE',
                    data: {
                        id: this.parentNode.getAttribute('data-id')
                    },
                    success: function () {
                        window.location.reload();
                    }
                });
            });

            var formEditOpened = false;

            var formEdit = document.createElement('form');
            /*form.setAttribute('action', '/response-comment');
             form.setAttribute('method', 'post');*/
            formEdit.style.display = 'flex';
            formEdit.style.width = '100%';
            formEdit.style.alignItems = 'center';
            formEdit.style.marginTop = '8px';

            var textarea = document.createElement('textarea');
            textarea.style.width = '75%';
            textarea.setAttribute('name', 'content');

            var submit = document.createElement('input');
            submit.setAttribute('type', 'submit');
            submit.setAttribute('value', 'Envoyer');

            formEdit.appendChild(textarea);
            formEdit.appendChild(submit);
            formEdit.addEventListener('click', function (e) {
                e.stopPropagation();
            });

            var btnEdit = document.querySelectorAll(".btn-edit");
            var commentId;
            var newContent;
            var oldContent;

            btnEdit.forEach(function (btn) {
                btn.addEventListener('click', function (e) {
                    e.stopPropagation();
                    e.preventDefault();

                    if(formEditOpened) {
                        $(formEdit).each(function() {
                            $(this.firstChild).animate({
                                height: 0
                            }, "normal");
                        });

                        setTimeout(function () {
                            formEdit.remove();
                        }, 300);

                        formEditOpened = false;
                    } else {
                        commentId = this.parentNode.getAttribute('data-id');
                        oldContent = this.parentNode.childNodes[11].textContent;
                        formEdit.firstChild.textContent = oldContent;

                        $(formEdit).insertAfter(this.parentNode);

                        $(formEdit).each(function() {
                            $(this.firstChild).animate({
                                height: 100
                            }, "normal");
                        });
                        formEditOpened = true;
                    }

                });
            });

            formEdit.addEventListener('submit', function (e) {
                newContent = this.firstChild.value;
                e.preventDefault();
                $.ajax({
                    url: '/edit-comment',
                    type: 'PUT',
                    data: {
                        content: newContent,
                        id: commentId
                    },
                    success: function () {
                        window.location.reload();
                    }
                });
            });

            document.body.addEventListener('click', function() {
                if(formEditOpened) {
                    $(formEdit).each(function() {
                        $(this.firstChild).animate({
                            height: 0
                        }, "normal");
                    });
                    setTimeout(function () {
                        formEdit.remove();
                    }, 300);
                    formEditOpened = false;
                }
            });

            $('.reply').each(function (e) {
                this.style.opacity = '0';
            });

            var $animation_elements = $('.reply');
            var $window = $(window);

            $window.on('scroll', check_if_in_view);
            $window.on('scroll resize', check_if_in_view);
            $window.trigger('scroll');

            function check_if_in_view() {
                var window_height = $window.height();
                var window_top_position = $window.scrollTop();
                var window_bottom_position = (window_top_position + window_height);

                $.each($animation_elements, function() {
                    var $element = $(this);
                    var element_height = $element.outerHeight();
                    var element_top_position = $element.offset().top;
                    var element_bottom_position = (element_top_position + element_height);

                    //check to see if this current container is within viewport
                    if ((element_bottom_position >= window_top_position) &&
                        (element_top_position <= window_bottom_position)) {
                        $element.css({
                            'transition-duration': '1.6s',
                            'transition-delay': '0.5s',
                            'opacity': '1',
                            'transform': 'translateX(0px)'
                        });
                    } else {
                        $element.css({
                            'transition-duration': 'none',
                            'transition-delay': 'none',
                            'opacity': '0',
                            'transform': 'translateX(-200px)'
                        });
                    }
                });
            }
        });
    </script>

{% endblock %}